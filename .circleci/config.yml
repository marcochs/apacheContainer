# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
# Use a package of configuration called an orb.
orbs:
  # build and push
  aws-ecr: circleci/aws-ecr@6.7.0
  # open and close SSH in security group
  aws-white-list-circleci-ip: configure/aws-white-list-circleci-ip@1.0.1

jobs:
  build_and_push:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - aws-ecr/build-and-push-image:
          account-url: AWS_ECR_ACCOUNT_URL
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          create-repo: true
          dockerfile: Dockerfile
          path: .
          region: AWS_REGION
          repo: my-apache2
          tag: "$CIRCLE_SHA1"
  permit_and_deploy:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - aws-white-list-circleci-ip/add:
          description: accessfromcircle
          port: 22
          mask: 32
          tag-key: circleci
          tag-value: bastionaccess
      - run:
          name: Touch SSH test
          command: |
            echo 'Hello There'
            ssh ec2-user@jump.cloudmindful.com 'touch circlewasHere$CIRCLE_SHA1; docker stop my-running-app; docker rm my-running-app; docker run -dit --restart=always --name my-running-app -p 81:80 141517001380.dkr.ecr.us-east-1.amazonaws.com/my-apache2:$CIRCLE_SHA1'
            echo 'Done with SSH test'
      - aws-white-list-circleci-ip/remove:
          description: accessfromcircle
          port: 22
          mask: 32
          tag-key: circleci
          tag-value: bastionaccess

# Orchestrate or schedule a set of jobs
workflows:
  # see https://circleci.com/blog/automatically-deploy-private-docker-images-to-aws-ecr/
  build_and_push_image:
    jobs:
      - build_and_push
      - permit_and_deploy:
          requires:
            - build_and_push
