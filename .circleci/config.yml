# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
# Use a package of configuration called an orb.
orbs:
  # build and push
  aws-ecr: circleci/aws-ecr@6.7.0

jobs:
  build_and_push:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - aws-ecr/build-and-push-image:
          account-url: AWS_ECR_ACCOUNT_URL
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          create-repo: true
          dockerfile: Dockerfile
          path: .
          region: AWS_REGION
          repo: my-apache2
          tag: latest,${CIRCLE_SHA1:0:7}
  release:
    machine:
#      image: ubuntu-1604:201903-01
      image: ubuntu-2004:202008-01
    steps:
      - checkout
#      - run:
#          name: setup environment for release.py
#          command: source ./scripts/env.bash
# need BASH_ENV? just do workaround &&
#      - run:
#          name: Show variables
#          command: |
#            echo RULE is $RULE
      - run:
          name: sudo pip3 install boto3
          command: sudo pip3 install boto3
      - run:
          name: run release.py for the blue-green deployment may need /opt/circleci/.pyenv/shims/python3
          command: source ./scripts/env.bash && ./scripts/release.py -vv  --tag ${CIRCLE_SHA1:0:7} --rule $RULE --svc_green $SVC_GREEN --svc_blue $SVC_BLUE --tg_blue $TG_BLUE --tg_green $TG_GREEN

# Orchestrate or schedule a set of jobs
workflows:
  # see https://circleci.com/blog/automatically-deploy-private-docker-images-to-aws-ecr/
  build_and_push_image:
    jobs:
      - build_and_push
      - release:
          requires:
            - build_and_push
